@page "/expense"
@using BugdetPath.Models
@using BugdetPath.Services
@inject IOutflowService OutflowService
@inject AuthenticationService AuthenticationService


<div class="form-container">
    <h1 class="form-title">Expense</h1>
    <EditForm OnValidSubmit="HandleSubmit">
        <div class="form-group">
            <label class="form-label" for="title">Title</label>
            <input type="text" id="title" class="form-input" @bind="Title" required />
        </div>

        <div class="form-group">
            <label class="form-label" for="amount">Amount</label>
            <input type="number" id="amount" class="form-input" @bind="Amount" step="0.01" required />
        </div>

        <div class="form-group">
            <label class="form-label" for="notes">Notes</label>
            <textarea id="notes" class="form-input form-textarea" @bind="Notes"></textarea>
        </div>

        <div class="form-group">
            <label class="form-label" for="date">Date</label>
            <input type="date" id="date" class="form-input" @bind="Date" required />
        </div>

        <div class="form-group">
            <label class="form-label" for="tags">Tags</label>
            <select id="tags" class="form-select" @bind="SelectedTag">
                <option value="">Select a tag</option>
                <option value="Rent">Rent</option>
                <option value="Utilities">Utilities</option>
                <option value="Groceries">Groceries</option>
                <option value="Transport">Transport</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Other">Other</option>
            </select>
        </div>

        @if (!IsCustomTagDisabled)
        {
            <div class="form-group d-flex align-items-center gap-2">
                <input type="text" id="customTags" class="form-control" @bind="CustomTag" placeholder="Enter custom tag" />
                <button type="button" class="btn btn-success btn-sm" @onclick="ConfirmCustomTag">Add</button>
                <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelCustomTag">Cancel</button>
            </div>
        }

        <button type="submit" class="submit-btn">Add Expense</button>
    </EditForm>
</div>

@if (Expenses.Any())
{
    <h2 class="table-heading">Your Expenses</h2>
    <table class="income-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Tag</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in Expenses)
            {
                <tr>
                    <td>@expense.Id</td>
                    <td>@expense.Title</td>
                    <td>@expense.Amount</td>
                    <td>@expense.Date.ToShortDateString()</td>
                    <td>@expense.Tag</td>
                    <td>@expense.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string Title = string.Empty;
    private decimal Amount;
    private string Notes = string.Empty;
    private DateTime Date = DateTime.Today;
    private string SelectedTag = string.Empty;
    private string CustomTag = string.Empty;
    private bool IsCustomTagDisabled = true;

    private List<ExpenseDetails> Expenses = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationService.GetAuthenticatedUserAsync();
        if (user != null)
        {
            Expenses = await OutflowService.LoadUserOutflowsAsync(user.Id);
        }
    }

    private async Task HandleSubmit()
    {
        var user = await AuthenticationService.GetAuthenticatedUserAsync();
        if (user == null)
            return;

        var expense = new ExpenseDetails
        {
            Title = Title,
            Amount = Amount,
            Notes = Notes,
            Date = Date,
            Tag = string.IsNullOrWhiteSpace(CustomTag) ? SelectedTag : CustomTag,
            UserId = user.Id
        };

        await OutflowService.SaveOutflowsAsync(expense);
        Expenses = await OutflowService.LoadUserOutflowsAsync(user.Id);

        // Reset form
        Title = string.Empty;
        Amount = 0;
        Notes = string.Empty;
        SelectedTag = string.Empty;
        CustomTag = string.Empty;
        IsCustomTagDisabled = true;
        Date = DateTime.Today;
    }

    private void ConfirmCustomTag()
    {
        IsCustomTagDisabled = true;
    }

    private void CancelCustomTag()
    {
        CustomTag = string.Empty;
        IsCustomTagDisabled = true;
    }
}

