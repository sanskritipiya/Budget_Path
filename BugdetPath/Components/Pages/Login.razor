@page "/"
@using BugdetPath.Components.Layout
@using BugdetPath.Services
@inject NavigationManager NavigationManager
@inject IUserService UserInfoService
@inject AuthenticationService authService
@layout EmptyNav
<div class="login-page">
    <div class="login-left">
        <img src="images/Login.png" alt="Login illustration" class="login-image" />
    </div>
    <div class="login-right">
        <div class="login-card">
            <h1 class="login-title">LOGIN</h1>
            <div class="login-group">
                <label for="Username" class="login-label">UserName</label>
                <input id="Username" type="text" @bind="username" class="login-input" placeholder="Enter your username" />
            </div>
            <div class="login-group">
                <label for="Password" class="login-label">Password</label>
                <input id="Password" type="password" @bind="password" class="login-input" placeholder="Enter your password" />
            </div>
            <button type="button" class="login-button" @onclick="LoginUser">Login</button>

            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="login-error">@errorMessage</div>
            }
            
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="login-success">@successMessage</div>
            }
            
            <div class="login-footer">
                <span>Don't have an account?</span>
                <a href="/Signup" class="login-link">Sign up</a>
            </div>
        </div>
    </div>
</div>

@code {
    private string username { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;
    private string successMessage { get; set; } = string.Empty;

    private async Task LoginUser()
    {
        try
        {
            var user = await UserInfoService.LoginAsync(username, password); // Uses your service method

            if (user != null)
            {
                authService.SetAuthenticatedUserAsync(user);
                successMessage = "Login successful! Redirecting...";
                errorMessage = string.Empty;
                
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "The username or password is invalid.";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed. Please try again: {ex.Message}";
            successMessage = string.Empty;
        }
    }
}
